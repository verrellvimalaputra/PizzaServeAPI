---

test_name: Make sure server implements crud functionality for sauce endpoint

includes:
  - !include common.yaml


stages:
  - name: Verify that status code equals 201 when we create a new sauce and the sauce is returned
    # max_retries and delay_after needs to be set in first stage of each stage to wait for uvicorn
    max_retries: 10
    delay_after: 2
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces
      json: &sauce
        name: "{sauce_name:s}"
        price: !float "{sauce_price:f}"
        description: "{sauce_description}"
        stock: !int "{sauce_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *sauce
        id: !anything
      save:
        json:
          sauce_id: id

#  - name: Verify that status code equals 303 and we get a redirect to an already existing item, when we create a new sauce with a name that already exists
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces
#      json:
#        name: "{sauce_name:s}"
#        price: 9.99
#        description: "My new sauce"
#        stock: 300
#      method: POST
#    response:
#      status_code: 303
#      headers:
#        location: "http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}"
#
#  #Get wrong Sauce
#  - name: Check for status 404 if we try to get an sauce with a wrong id
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/00000000-0000-0000-0000-000000000000
#      method: GET
#    response:
#      status_code: 404
#
#  #Get specific Sauce
#  - name: Get sauce with id
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}
#      method: GET
#    response:
#      status_code: 200
#      json: &another_sauce
#        <<: *sauce
#        id: "{sauce_id}"
#
#  #Get all Sauces
#  - name: Get a list of sauces
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces
#      method: GET
#    response:
#      status_code: 200
#      json: !anylist
#        id: "{sauce_id}"
#        name: "{sauce_name:s}"
#        price: !float "{sauce_price:f}"
#        description: "{sauce_description}"
#
#
#  - name: Update sauce
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}
#      method: PUT
#      json:
#        <<: *sauce
#        description: "My new description"
#    response:
#      status_code: 204
#
#  - name: Check if a new sauce is created when sauce gets a new name and name does not already exists
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}
#      method: PUT
#      json:
#        <<: *sauce
#        name: "Italian Style"
#    response:
#      status_code: 201
#      json:
#        <<: *sauce
#        id: !anything
#        name: "Italian Style"
#      save:
#        json:
#          italian_id: id
#
#  - name: Check for status 303 if we update sauce to an already existing name
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}
#      method: PUT
#      json:
#        <<: *sauce
#        name: "Italian Style"
#    response:
#      status_code: 303
#      headers:
#        location: "http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{italian_id}"
#
#  - name: Check for status 404 if we update with a non existing id
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/00000000-0000-0000-0000-000000000000
#      method: PUT
#      json:
#        <<: *sauce
#        name: "Italian Style"
#    response:
#      status_code: 404
#
#  #Delete wrong Sauce
#  - name: Check for status 404 when trying to delete a non existent sauce
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/00000000-0000-0000-0000-000000000000
#      method: DELETE
#    response:
#      status_code: 404

#----------------------Delete Everything----------------------------
  #Delete Sauce
  - name: Delete first created sauce with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{sauce_id}
      method: DELETE
    response:
      status_code: 204
#  #Delete Sauce
#  - name: Delete second created sauce with id
#    request:
#      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/sauces/{italian_id}
#      method: DELETE
#    response:
#      status_code: 204

