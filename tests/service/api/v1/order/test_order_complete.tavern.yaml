---

test_name: Make sure server implements crud functionality for order endpoint

includes:
  - !include complete_order_variables.yaml

stages:

  - name: Verify that status code equals 201 when we create a new dough and the dough is returned
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/doughs
      json: &dough
        name: "{dough_name:s}"
        price: !float "{dough_price:f}"
        description: "{dough_description}"
        stock: !int "{dough_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *dough
        id: !anything
      save:
        json:
          dough_id: id

  - name: Create the topping1
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings
      json: &fungi_topping
        name: "{topping1_name:s}"
        price: !float "{topping1_price:f}"
        description: "{topping1_description}"
        stock: !int "{topping1_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *fungi_topping
        id: !anything
      save:
        json:
          topping1_id: id

  - name: Create the topping2
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings
      json: &ham_topping
        name: "{topping2_name:s}"
        price: !float "{topping2_price:f}"
        description: "{topping2_description}"
        stock: !int "{topping2_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *ham_topping
        id: !anything
      save:
        json:
          topping2_id: id

  - name: Create the pizza_type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types
      json:
        name: "{pizza_name:s}"
        price: !float "{pizza_price:f}"
        description: "{pizza_description}"
        dough_id: "{dough_id}"
      method: POST
    response:
      status_code: 201
      json:
        name: "{pizza_name:s}"
        price: !float "{pizza_price:f}"
        description: "{pizza_description}"
        id: !anything
      save:
        json:
          pizza_type_id: id

  - name: Create a topping pizza_type relation
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      json: &salami_pizza_salami_topping_quantity
        quantity: !int "{quantity1:d}"
        topping_id: "{topping1_id}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *salami_pizza_salami_topping_quantity

  - name: Create a second topping pizza_type relation
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      json: &salami_pizza_salami_topping_quantity
        quantity: !int "{quantity2:d}"
        topping_id: "{topping2_id}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *salami_pizza_salami_topping_quantity



#---------------------Delete Everything-----------------------------------
  #Delete Pizza_type
  - name: Delete pizza_type with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: DELETE
    response:
      status_code: 204

  #Delete Topping 2
  - name: Delete topping2 with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings/{topping2_id}
      method: DELETE
    response:
      status_code: 204

  #Delete Topping 1
  - name: Delete topping1 with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings/{topping1_id}
      method: DELETE
    response:
      status_code: 204
  
  #Delete Dough
  - name: Delete created dough with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/doughs/{dough_id}
      method: DELETE
    response:
      status_code: 204
  





