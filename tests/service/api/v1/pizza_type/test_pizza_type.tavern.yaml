---

test_name: Make sure server implements crud functionality for pizza_type endpoint

includes:
  - !include common.yaml


stages:
  - name: Verify that status code equals 201 when we create a new dough and the dough is returned
    # max_retries and delay_after needs to be set in first stage of each stage to wait for uvicorn
    max_retries: 10
    delay_after: 2
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/doughs
      json: &dough
        name: "{dough_name:s}"
        price: !float "{dough_price:f}"
        description: "{dough_description}"
        stock: !int "{dough_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *dough
        id: !anything
      save:
        json:
          dough_id: id


  - name: Verify that status code equals 201 when we create a new pizza and the pizza is returned
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types
      json: &salami_type_request
        name: "{pizza_name:s}"
        price: !float "{pizza_price:f}"
        description: "{pizza_description}"
        dough_id: "{dough_id}"
      method: POST
    response:
      status_code: 201
      json: &salami_type_response
        name: "{pizza_name:s}"
        price: !float "{pizza_price:f}"
        description: "{pizza_description}"
        id: !anything
      save:
        json:
          pizza_type_id: id


  - name: Verify that status code equals 303 and we get a redirect to an already existing item, when we create a new pizza with a name that already exists
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types
      json:
        <<: *salami_type_request
        name: "{pizza_name:s}"
        price: 9.00
        description: "My new pizza"
      method: POST
    response:
      status_code: 303
      headers:
        location: "http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}"

  - name: Verify that status code equals 404 when we create a new pizza with a non-existent dough
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types
      json:
        name: "random name"
        price: !float "{pizza_price:f}"
        description: "{pizza_description}"
        dough_id: "{not_available_id}"
      method: POST
    response:
      status_code: 404

  - name: Get pizza with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: GET
    response:
      status_code: 200
      json: &salami_with_topping
        <<: *salami_type_response
        id: "{pizza_type_id}"

  - name: Get pizza with a non existent id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{not_available_id}
      method: GET
    response:
      status_code: 404

  - name: Get a list of pizzas
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types
      method: GET
    response:
      status_code: 200
      json:
        - *salami_with_topping

  - name: Update pizza
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: PUT
      json:
        <<: *salami_type_request
        description: "My new description"
    response:
      status_code: 204

  - name: Check if a new pizza is created when pizza gets a new name and name does not already exists
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: PUT
      json:
        <<: *salami_type_request
        name: "Cheese"
    response:
      status_code: 201
      json:
        <<: *salami_type_response
        id: !anything
        name: "Cheese"
      save:
        json:
          cheese_id: id

  - name: Check for status 303 if we update pizza to an already existing name
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: PUT
      json:
        <<: *salami_type_request
        name: "Cheese"
    response:
      status_code: 303
      headers:
        location: "http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{cheese_id}"

  - name: Check for status 404 if we update with a non existing id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/00000000-0000-0000-0000-000000000000
      method: PUT
      json:
        <<: *salami_type_request
        name: "Cheese"
    response:
      status_code: 404

  - name: Create a Topping to put on the Pizza and Verify that status code equals 201 when we create a new topping and the topping is returned
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings
      json: &salami_topping
        name: "{topping_name:s}"
        price: !float "{topping_price:f}"
        description: "{topping_description}"
        stock: !int "{topping_stock:d}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *salami_topping
        id: !anything
      save:
        json:
          topping_id: id

  - name: verify that status code equals 201 and the quantity and topping_id is returned when we create a topping pizza_type relation (put a topping on a pizza)
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      json: &salami_pizza_salami_topping_quantity
        quantity: !int "{quantity:d}"
        topping_id: "{topping_id}"
      method: POST
    response:
      status_code: 201
      json:
        <<: *salami_pizza_salami_topping_quantity

  - name: verify that status code equals 404 when trying to add a topping to a non-existent pizza type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{not_available_id}/toppings
      json:
        quantity: !int "{quantity:d}"
        topping_id: "{topping_id}"
      method: POST
    response:
      status_code: 404

  - name: verify that status code equals 404  when trying to add a non-existent topping to a pizza type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      json:
        quantity: !int "{quantity:d}"
        topping_id: "{not_available_id}"
      method: POST
    response:
      status_code: 404


  - name: verify that status code equals 303 and get a redirect when we try to create a topping pizza_type relation which already exists
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      json:
        quantity: !int "{quantity:d}"
        topping_id: "{topping_id}"
      method: POST
    response:
      status_code: 303
      headers:
        location: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings

  - name: verify that we get status code 200 and all toppings for a pizza
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/toppings
      method: GET
    response:
      status_code: 200
      json:
        - *salami_pizza_salami_topping_quantity

  - name: verify that we get status code 404 when trying to get all topping from a not existing pizza type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{not_available_id}/toppings
      method: GET
    response:
      status_code: 404

  - name: Get dough of pizza_type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}/dough
      method: GET
    response:
      status_code: 200
      json:
        <<: *dough
        id: "{dough_id}"

  - name: Verify status code 404 when trying to get the dough of a non-existent pizza type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{not_available_id}/dough
      method: GET
    response:
      status_code: 404

  - name: Check for status 404 when trying to delete a non existent pizza type
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/00000000-0000-0000-0000-000000000000
      method: DELETE
    response:
      status_code: 404

  #Important: Delete Pizza before topping when having a pizza_type_topping relationship!!!
  - name: Delete first created pizza with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{pizza_type_id}
      method: DELETE
    response:
      status_code: 204

  - name: Delete second created pizza with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/pizza-types/{cheese_id}
      method: DELETE
    response:
      status_code: 204

  - name: Delete first created topping with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/toppings/{topping_id}
      method: DELETE
    response:
      status_code: 204


  - name: Delete dough with id
    request:
      url: http://{tavern.env_vars.API_SERVER}:{tavern.env_vars.API_PORT}/v1/doughs/{dough_id}
      method: DELETE
    response:
      status_code: 204

